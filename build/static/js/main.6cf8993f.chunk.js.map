{"version":3,"sources":["utils.js","components/Link.js","constants.js","components/LinkList.js","components/CreateLink.js","components/Login.js","components/Header.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","VOTE_MUTATION","gql","_templateObject","Object","taggedTemplateLiteral","Link","props","link","authToken","localStorage","getItem","_useMutation","useMutation","variables","linkId","id","onCompleted","_ref","createVote","console","log","update","cache","_ref2","vote","data","updatedLinks","readQuery","query","FEED_QUERY","links","map","feedLink","objectSpread","votes","concat","toConsumableArray","edges","writeQuery","feed","slicedToArray","react_default","a","createElement","className","index","style","cursor","onClick","window","location","reload","description","url","length","postedBy","username","toLocaleString","LinkList_templateObject","CREATE_LINK_MUTATION","CreateLink_templateObject","CreateLink","history","useHistory","_useState","useState","_useState2","formState","setFormState","post","take","orderBy","createdAt","skip","push","createLink","onSubmit","e","preventDefault","value","onChange","target","type","placeholder","SIGNUP_MUTATION","Login_templateObject","LOGIN_MUTATION","_templateObject2","Login","login","email","password","name","tokenAuth","setItem","token","_useMutation3","signup","then","Header","react_router_dom","to","removeItem","FEED_SEARCH_QUERY","Search_templateObject","Search","searchFilter","setSearchFilter","_useLazyQuery","useLazyQuery","_useLazyQuery2","executeSearch","Fragment","search","components_Link","key","App","components_Header","react_router","exact","path","render","component","Boolean","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","errorLink","onError","graphQLErrors","networkError","forEach","_ref3","message","locations","client","ApolloClient","from","InMemoryCache","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6cf8993f.chunk.js","sourcesContent":["function timeDifference(current, previous) {\n    const milliSecondsPerMinute = 60 * 1000;\n    const milliSecondsPerHour = milliSecondsPerMinute * 60;\n    const milliSecondsPerDay = milliSecondsPerHour * 24;\n    const milliSecondsPerMonth = milliSecondsPerDay * 30;\n    const milliSecondsPerYear = milliSecondsPerDay * 365;\n  \n    const elapsed = current - previous;\n  \n    if (elapsed < milliSecondsPerMinute / 3) {\n      return 'just now';\n    }\n  \n    if (elapsed < milliSecondsPerMinute) {\n      return 'less than 1 min ago';\n    } else if (elapsed < milliSecondsPerHour) {\n      return (\n        Math.round(elapsed / milliSecondsPerMinute) +\n        ' min ago'\n      );\n    } else if (elapsed < milliSecondsPerDay) {\n      return (\n        Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n      );\n    } else if (elapsed < milliSecondsPerMonth) {\n      return (\n        Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n      );\n    } else if (elapsed < milliSecondsPerYear) {\n      return (\n        Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n      );\n    } else {\n      return (\n        Math.round(elapsed / milliSecondsPerYear) +\n        ' years ago'\n      );\n    }\n  }\n  \n  export function timeDifferenceForDate(date) {\n    const now = new Date().getTime();\n    const updated = new Date(date).getTime();\n    return timeDifference(now, updated);\n  }","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { AUTH_TOKEN, LINKS_PER_PAGE } from '../constants';\nimport { timeDifferenceForDate } from '../utils';\nimport { FEED_QUERY } from './LinkList';\n\nconst VOTE_MUTATION = gql`\n  mutation createVote($linkId: Int!) {\n    createVote(linkId: $linkId) {\n      user {\n        username\n        email\n      }\n      link {\n        url\n        description\n      }\n    }\n  }\n`;\n\nconst Link = (props) => {\n  const { link } = props;\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n\n  const take = LINKS_PER_PAGE;\n  const skip = 0;\n  const orderBy = { createdAt: 'desc' };\n\n  const [vote] = useMutation(VOTE_MUTATION, {\n    variables: {\n      linkId: link.id\n    },\n    onCompleted: ({ createVote }) => {\n      console.log(createVote);\n    },\n   update(cache, { data: { vote } }) {\n      const { links } = cache.readQuery({\n        query: FEED_QUERY\n      });\n\n    const updatedLinks = links.map((feedLink) => {\n        if (feedLink.id === link.id) {\n          return {\n            ...feedLink,\n            votes: [...feedLink.votes.edges, vote]\n          };\n        }\n        return feedLink;\n      } );\n\n\n    cache.writeQuery({\n        query: FEED_QUERY,\n        data: {\n          feed: {\n            links: updatedLinks\n          }\n        }\n    });\n  }\n})\n\n  return (\n    <div className=\"flex mt2 items-start\">\n      <div className=\"flex items-center\">\n\n        <span className=\"gray\">{props.index + 1}.</span>\n\n        {authToken && (\n          <div\n            className=\"ml1 gray f11\"\n            style={{ cursor: 'pointer' }}\n            onClick={() => {\n              vote()\n              window.location.reload()\n            }}\n          >\n            ▲\n          </div>\n        )}\n      </div>\n      <div className=\"ml1\">\n        <div>\n        {link.id} - {link.description} ({link.url})\n        </div>\n        {authToken && (\n          <div className=\"f6 lh-copy gray\">\n            {link.votes.edges.length} votes | by{' '}\n            {link.postedBy ? link.postedBy.username : 'Unknown'}{' '}\n            {timeDifferenceForDate(Date().toLocaleString())}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Link;","export const AUTH_TOKEN = 'auth-token';\nexport const LINKS_PER_PAGE = 'links-per-page';","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { LINKS_PER_PAGE } from '../constants';\nimport Link from './Link';\n\n\n\n\n\nexport const FEED_QUERY = gql`\n  {\n  links{\n    id\n    url\n    description\n    postedBy{\n      id\n      email\n      username\n    }\n    votes{\n      edges{\n        node{\n          id\n          link{\n            id\n            url\n            description\n          }\n        }\n      }\n    }\n  }\n}\n`;\n/*\nconst NEW_LINKS_SUBSCRIPTION = gql`\nquery{\n  relayLinks{\n    edges{\n      node{\n        id\n        url\n        description\n         postedBy {\n        id\n        username\n      }\n        votes {\n          edges{\n            node{\n              id\n              user{\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n*/\n/*\nconst getQueryVariables = (isNewPage, page) => {\n  const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n  const take = isNewPage ? LINKS_PER_PAGE : 100;\n  const orderBy = { createdAt: 'desc' };\n  return { take, skip, orderBy };\n};\n*/\n\n\n\nconst LinkList = () => {\n    const { data } = useQuery(FEED_QUERY);\n\n    return (\n    <div>\n    {data && (\n      <>\n        {data.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n      </>\n    )}\n  </div>\n    );\n  };\n\nexport default LinkList;\n\n\n/*\nconst LinkList = () => {\n  const history = useHistory();\n  const isNewPage = history.location.pathname.includes(\n    'new'\n  );\n  const pageIndexParams = history.location.pathname.split(\n    '/'\n  );\n  const page = parseInt(\n    pageIndexParams[pageIndexParams.length - 1]\n  );\n  const pageIndex = page ? (page - 1) * LINKS_PER_PAGE : 0;\n  const {\n    data,\n    loading,\n    error,\n    subscribeToMore\n  } = useQuery(FEED_QUERY, {\n    variables: getQueryVariables(isNewPage, page)\n  });\nsubscribeToMore({\n  document: NEW_LINKS_SUBSCRIPTION,\n  updateQuery: (prev, { subscriptionData\n}) => {\n    if (!subscriptionData.data) return prev;\n    const newLink = subscriptionData.data.newLink;\n    const exists = prev.links.find(\n      ({ id }) => id === newLink.id\n    );\n    if (exists) return prev;\n    return Object.assign({}, prev, {\n      feed: {\n        links: [newLink, ...prev.links],\n        count: prev.links.length + 1,\n        __typename: prev.__typename\n      }\n    });\n  }\n});\n    subscribeToMore({\n    document: NEW_VOTES_SUBSCRIPTION\n  });\nreturn (\n    <div>\n    {data && (\n      <>\n        {data.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n      </>\n    )}\n  </div>\n    );\n  };\nexport default LinkList;\n*/","import React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { LINKS_PER_PAGE } from '../constants';\nimport { FEED_QUERY } from './LinkList';\n\n\nconst CREATE_LINK_MUTATION = gql`\n  mutation CreateLink(\n    $description: String!\n    $url: String!\n  ) {\n    createLink(description: $description, url: $url) {\n      id\n      url\n      description\n    }\n  }\n`;\n\nconst CreateLink = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    description: '',\n    url: ''\n  });\n\n\n const [createLink] = useMutation(CREATE_LINK_MUTATION, {\n    variables: {\n      description: formState.description,\n      url: formState.url\n    },\n    update: (cache, { data: { post } }) => {\n      const take = LINKS_PER_PAGE;\n      const skip = 0;\n      const orderBy = { createdAt: 'desc' };\n\n      const data = cache.readQuery({\n        query: FEED_QUERY,\n        variables: {\n          take,\n          skip,\n          orderBy\n        }\n      });\n\n      cache.writeQuery({\n        query: FEED_QUERY,\n        data: {\n          feed: {\n            links: [post, ...data.feed.links]\n          }\n        },\n        variables: {\n          take,\n          skip,\n          orderBy\n        }\n      });\n    },\n    onCompleted: () => history.push('/new/1')\n  });\n\n  \n \n//Crea funcion para lmandar a otro componente\n  function clickHistory(){\n    history.push(\"/\");\n    window.location.reload()\n  }\n  \n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          createLink();\n        }}\n      >\n        <div className=\"flex flex-column mt3\">\n          <input\n            className=\"mb2\"\n            value={formState.description}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                description: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"A description for the link\"\n          />\n          <input\n            className=\"mb2\"\n            value={formState.url}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                url: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"The URL for the link\"\n          />\n        </div>\n        <button type=\"submit\"  onClick={ () => {\n          createLink();\n          clickHistory(); //Se llama a la funcion\n          \n        } }>Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateLink;","import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\nimport { Link } from 'react-router-dom';\n\n\nconst SIGNUP_MUTATION = gql`\nmutation SignupMutation(\n  $email: String!\n  $password: String!\n  $username: String!\n) {\n  createUser(\n    email: $email\n    password: $password\n    username: $username\n  ) {\n   user{\n    id\n    email\n    password\n    username\n  }\n  }\n\n  tokenAuth(username: $username,password: $password){\n  token\n  }\n}\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation TokenAuth(\n    $username: String!\n    $password: String!\n  ) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\n\n\nconst Login = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    login: true,\n    email: '',\n    password: '',\n    name: ''\n  });\n\nconst [login] = useMutation(LOGIN_MUTATION, {\n  variables: {\n    username: formState.email,\n    password: formState.password\n  },\n  onCompleted: ({ tokenAuth }) => {\n    console.log(tokenAuth);\n    localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\n    history.push('/');\n  }\n});\n\n\nfunction refreshPage(){ \n  window.location.reload(true); \n}\n\nconst [signup] = useMutation(SIGNUP_MUTATION, {\n  variables: {\n    username: formState.name,\n    email: formState.email,\n    password: formState.password\n  },\n  onCompleted: ({ tokenAuth }) => {\n    localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\n    history.push('/');\n\n  }\n});\n\n\n\n  return (\n    <div className=\"flex pa1 justify-between nowrap orange centerVertical\">\n      <h4 className=\"mv3\">\n        {formState.login ? 'Login' : 'Sign Up'}\n      </h4>\n      <div className=\"flex flex-column\">\n        {!formState.login && (\n          <input\n            value={formState.name}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                name: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={formState.email}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              email: e.target.value\n            })\n          }\n          type=\"text\"\n          placeholder=\"Your Email\"\n        />\n        <input\n          value={formState.password}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              password: e.target.value\n            })\n          }\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div className=\"flex mt3\">\n\n<button \n    className=\"pointer mr2 button\"\n    onClick={() => {\n      //formState.login ? login : signup () \n      if (formState.login ) {\n        login(formState.username, formState.password ).then(()=>{\n          window.location.reload()\n          \n        })\n        \n      } else {\n        signup(formState.name, formState.password)\n      }\n    }}\n  >\n    {formState.login ? 'login' : 'create account' }\n    \n    \n  </button >\n  <button\n    className=\"pointer button\"\n    onClick={(e) =>\n      setFormState({\n        ...formState,\n        login: !formState.login\n      })\n    }\n  >\n          {formState.login\n            ? 'need to create an account?'\n            : 'already have an account?'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","import React from 'react';\nimport { useHistory } from 'react-router';\n//import { Link, withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { AUTH_TOKEN } from '../constants';\nimport Login from './Login';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faSignOutAlt, faNewspaper, faChevronCircleUp, faSearch, faUpload,faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst Header = () => {\n  const history = useHistory();\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n\n  function clickLogout(){\n    history.push(\"/login\")\n  }\n  return (\n    \n    <div className=\" justify-center row nowrap orange centerVertical\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">Proyecto del pa macizo Irving Saul</div>\n        <Link to=\"/\" className=\"ml1 hoverB:hover no-underline black\">\n        new\n        </Link>\n\n\t<div className=\"ml1\"> </div>\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\n        top\n        </Link>\n\n        <div className=\"ml1\"></div>\n        <Link to=\"/search\" className=\"ml1 no-underline black\">\n        search\n        </Link>\n\n        {authToken && (\n          <div className=\"flex\">\n            <div className=\"ml1\"></div>\n\t<Link to=\"/create\"\n          className=\"ml1 no-underline black\"\n        >\n         new Link\n            </Link>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"flex flex-fixed\">\n        {authToken ? (\n          <div\n            className=\"ml1 pointer black\"\n            onClick={() => {\n              localStorage.removeItem(AUTH_TOKEN);\n              clickLogout()\n              window.location.reload()\n              \n            }}\n          >\n            logout\n          </div>\n        ) : (\n          <Link\n            to=\"/login\"\n            className=\"ml1 no-underline black\"\n          >\n            logout\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Link from './Link';\n\n\n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($search: String) {\n  links(search: $search){\n      id\n      url\n        description\n        postedBy {\n          id\n          username\n        }\n        votes {\n          edges{\n            node{\n              id\n               user {\n                id\n            }\n            }\n          }\n\n        }\n       # createdAt\n  }\n}\n`;\n\nconst Search = () => {\n  const [searchFilter, setSearchFilter] = useState('');\n  const [executeSearch, { data }] = useLazyQuery(\n    FEED_SEARCH_QUERY\n  );\n\n  return (\n    <>\n      <div>\n        Search\n        <input\n          type=\"text\"\n          onChange={(e) => setSearchFilter(e.target.value)}\n        />\n        <button\n          onClick={() =>\n            executeSearch({\n              variables: { search: searchFilter }\n            })\n          }\n        >\n          OK\n        </button>\n      </div>\n      {data &&\n        data.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n    </>\n  );\n};\nexport default Search;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport CreateLink from './CreateLink';\nimport Header from './Header';\nimport LinkList from './LinkList';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './Login'\nimport Search from './Search';;\n\n\n\nconst App = () => (\n  <div className=\"center w85\">\n    <Header />\n    <div className=\"ph3 pv1 background-gray\">\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => <Redirect to=\"/new/1\"/>}\n        />\n\n        <Route\n          exact\n          path=\"/create\"\n          component={CreateLink}\n        />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/search\" component={Search} />\n      </Switch>\n    </div>\n\n    <div className=\"Center\">\n      <h1>Elon Musk</h1>\n      <p>\"Un consejo: es importante ver el conocimiento como una especie de árbol semántico; asegúrate de entender bien los principios fundamentales, es decir, el tronco y las ramas, antes de entrar en las hojas o los detalles, o no habrá nada donde puedan agarrarse\"</p>\n      </div>\n  </div>\n);\n\nexport default App;\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\nimport { onError } from \"@apollo/client/link/error\"\nimport { split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n\n\n\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n\n  from\n} from '@apollo/client';\n\n\n\n\n\nconst httpLink = createHttpLink({\n   uri: 'http://35.232.232.192:8081/graphql/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  \n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    \n    headers: {\n      ...headers,\n      authorization: token ? `JWT ${token}` : ''\n    }\n  };\n});\n\n\n/*\nconst wsLink = new WebSocketLink({\n  uri: `ws:35.232.232.192:8086/ws/`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN)\n    }\n  }\n});\n*\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return (\n      kind === 'OperationDefinition' &&\n      operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n*/\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n// 3\nconst client = new ApolloClient({\n  link: from([authLink, errorLink, httpLink]),\n  cache: new InMemoryCache()\n});\n\n\n\n// 4\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n"],"sourceRoot":""}